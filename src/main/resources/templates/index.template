<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Tuapse torrent search</title>

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
</head>

<script src="https://code.jquery.com/jquery-3.2.1.js" integrity="sha256-DZAnKJ/6XZ9si04Hgrsxu/8s717jcIzLy3oi35EouyE="
        crossorigin="anonymous"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.1.2/handlebars.min.js"></script>
<script src="https://github.com/eBay/jsonpipe/blob/master/jsonpipe.js"></script>


<body>

<template id="torrent-template">
    <li class="collection-item">
        <div class="row">
            <div class="col s12 m8"><b>{{torrent.name}}</b> [Peers: {{torrent.numPeers}}]</div>
            <div class="col s6 m2">
                <a class="waves-effect waves-light btn-small" href="{{hrefFile}}" download="{{fileName}}">Torrent
                    file</a>
            </div>
            <div class="col s6 m2">
                <a class="waves-effect waves-light btn-small" href="{{href}}">Magnet</a>
            </div>
        </div>
        {{#if highlights}}
        <ul class="collection">
            {{#each highlights}}
            <li class="collection-item ">
                <div class="row">
                    <a class="modal-trigger col m10" href="#{{this.path}}">{{{this.path}}}</a>
                    <div class="col m2">Size: {{this.humanSize}}</div>
                </div>
                <div id="{{{this.path}}}" class="modal bottom-sheet">
                    <div class="modal-content">

                        <div class="modal-content">
                            <h3 class="header">Select option</h3>
                            <ul class="collection">
                                <li class="collection-item">
                                    <a id="play_kodi{{../torrent.infoHash}}{{{this.index}}}" href="#">Play on
                                        kodi</a>
                                </li>
                                <li class="collection-item">

                                    <a id="download_direct{{../torrent.infoHash}}{{{this.index}}}"
                                       href="[TUAPSE_PLAY_ORIGIN]/api/v1/fetchFile?hash={{../torrent.infoHash}}&index={{this.index}}"
                                       download>Direct
                                        download</a>
                                </li>
                            </ul>
                        </div>

                    </div>
                </div>
            </li>

            {{/each}}
        </ul>
        {{/if}}
    </li>
</template>

<div>
    <div id="progress" class="progress">
        <div class="indeterminate"></div>
    </div>
    <div class="row valign-wrapper">
        <div class="col s2">Peers: <span id="peersCount">0</span></div>
        <div class="col s4">Torrents count: <span id="torrentsCount">0</span></div>
        <div class="col s6">Index size: <span id="torrentsSize">0</span></div>
    </div>
    <div class="row valign-wrapper">
        <div class="col s9"><input id="searchText" class="input" type="text" placeholder="What want to find"></div>
        <div class="col s3">
            <button id="searchBtn" class="waves-effect waves-light btn">Search</button>
        </div>
    </div>

    <ul id="torrentsFound" class="collection">

    </ul>

</div>

</body>


<script>
    var searchRequest;
    $(document).ready(function () {
        // $('.modal').modal();
        var searchBtn = document.getElementById("searchBtn");

        document.getElementById("searchText")
            .addEventListener("keyup", function (event) {
                event.preventDefault();
                if (event.keyCode === 13) {
                    searchBtn.click();
                }
            });

        var progressEl = document.getElementById('progress');
        progressEl.style.visibility = 'hidden';
        var torrentsEl = document.getElementById('torrentsFound');
        var template = document.getElementById('torrent-template').innerHTML;
        var rendering = Handlebars.compile(template);
        searchBtn.onclick = function () {
            if (searchRequest)
                searchRequest.abort();
            torrentsEl.innerHTML = '';
            var text = document.getElementById("searchText").value;

            //================
            progressEl.style.visibility = 'visible';
            jsonpipe.flow(window.location.origin + "/api/v1/search_eval_peers?text=" + text, {
                "delimiter": "\n", // String. The delimiter separating valid JSON objects; default is "\n\n"
                "onHeaders": function (statusText, headers) {
                    // Do something with the headers and the statusText.
                },
                "success": handleSearchChunk,
                "error": function (errorMsg) {
                    // Something wrong happened, check the error message
                },
                "complete": function (statusText) {
                    console.log(statusText);
                    progressEl.style.visibility = 'hidden'
                },
                "timeout": 600000, // 10 min timeout
                "method": "GET",
                "headers": { // Object. An object of additional header key/value pairs to send along with request
                    // "X-Requested-With": "XMLHttpRequest"
                },
                "data": "", // String. A serialized string to be sent in a POST/PUT request,
                "withCredentials": true // Boolean. Send cookies when making cross-origin requests; default is true
            });
            //================
        };

        function handleSearchChunk(torArr) {
            console.log("Receive chunk:");
            console.log(torArr);
            try {
                var torrents = JSON.parse(torArr);
                torrents.forEach(function (torrent) {
                    torrent.fileBtnId = torrent.torrent.infoHash + "_f";
                    torrent.href = "magnet:?xt=urn:btih:" + torrent.torrent.infoHash;
                    torrent.hrefFile = "/api/v1/generateTorrentFile?hash=" + torrent.torrent.infoHash;
                    torrent.fileName = torrent.torrent.infoHash + ".torrent";

                    console.log(torrent);

                    highlights = torrent.highlights.map(function (file) {
                        file.humanSize = humanFileSize(file.length, false);
                        return file;
                    });

                    torrent.highlights = highlights;

                    var li = document.createElement('li'); // is a node
                    li.innerHTML = rendering(torrent);
                    torrentsEl.appendChild(li);


                    torrent.highlights.map(function (file) {
                        file.humanSize = humanFileSize(file.length, false);
                        return file;
                    }).forEach(function (file) {
                        //play, download etc links
                        console.log(file);
                        $("#play_kodi" + torrent.torrent.infoHash + file.index).click(function () {
                            $.ajax({
                                url: '[TUAPSE_PLAY_ORIGIN]/api/v1/play',
                                type: 'POST',
                                crossDomain: true,
                                data: JSON.stringify({
                                    hash: torrent.torrent.infoHash,
                                    index: file.index,
                                    streaming: 'xbmc'
                                }),
                                contentType: 'application/json; charset=utf-8',
                                dataType: 'json',
                                async: false,
                                success: function (data) {
                                    M.toast({html: 'Playing on kodi...'}) //TODO file name only
                                }
                            });
                        });
                    })
                });
            }
            catch (e) {
                console.log(e);
            }

            $('.modal').modal();
        }


        function updP2pMeta() {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    var meta = JSON.parse(xhr.responseText);
                    document.getElementById('peersCount').innerHTML = meta.count;
                }
            };
            xhr.open('GET', '/api/v1/p2pMeta', true);
            xhr.send();
        }

        function updIndexMeta() {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    var meta = JSON.parse(xhr.responseText);
                    document.getElementById('torrentsCount').innerHTML = meta.docsCount;
                    document.getElementById('torrentsSize').innerHTML = humanFileSize(meta.indexSize, false);
                }
            };
            xhr.open('GET', '/api/v1/indexMeta', true);
            xhr.send();
        }

        function humanFileSize(bytes, si) {
            var thresh = si ? 1000 : 1024;
            if (Math.abs(bytes) < thresh) {
                return bytes + ' B';
            }
            var units = si
                ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
                : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
            var u = -1;
            do {
                bytes /= thresh;
                ++u;
            } while (Math.abs(bytes) >= thresh && u < units.length - 1);
            return bytes.toFixed(1) + ' ' + units[u];
        }

        setInterval(function () {
            updP2pMeta();
        }, 60000); //1 min

        setInterval(function () {
            updIndexMeta();
        }, 60000); //1 min

        updIndexMeta();
        updP2pMeta();
    });
</script>

</html>
